/*
 * Copyright (c) 2024. Devtron Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { useState } from 'react'
import Tippy from '@tippyjs/react'
import {
    getSeverityCountFromSummary,
    getTotalSeverityCount,
    SecurityModal,
    SeverityCount,
} from '@devtron-labs/devtron-fe-common-lib'
import { ReactComponent as Question } from '../../../../assets/icons/ic-help-outline.svg'
import { ReactComponent as Bug } from '../../../../assets/icons/ic-nav-bug.svg'
import { ReactComponent as Secure } from '../../../../assets/icons/ic-secure.svg'
import { SecurityVulnerabilityCardType } from './appDetails.type'
import LoadingCard from './LoadingCard'
import { importComponentFromFELibrary } from '../../../common'
import { useGetAppSecurityDetails } from './AppSecurity'

const isFELibAvailable = importComponentFromFELibrary('isFELibAvailable', null, 'function')
const SecurityModalSidebar = importComponentFromFELibrary('SecurityModalSidebar', null, 'function')

export const SecurityVulnerabilityCard = ({
    cardLoading,
    appId,
    envId,
    installedAppId,
    artifactId,
    isExternalCI,
}: SecurityVulnerabilityCardType) => {
    const [showScanDetailsModal, setShowScanDetailsModal] = useState<boolean>(false)
    const isSecurityScanV2Enabled = window._env_.ENABLE_RESOURCE_SCAN_V2 && !!isFELibAvailable

    const handleModalClose = () => setShowScanDetailsModal(false)

    const { scanDetailsLoading, scanDetailsResponse, scanDetailsError, reloadScanDetails, severityCount } =
        useGetAppSecurityDetails({ appId: +appId, envId: +envId, installedAppId, artifactId, isSecurityScanV2Enabled })

    // Since we get status in v2 Api only
    const imageScanFailed: boolean = isSecurityScanV2Enabled && scanDetailsResponse?.result.codeScan.status === 'Failed'
    const imageScanProgressing: boolean =
        isSecurityScanV2Enabled && scanDetailsResponse?.result.codeScan.status === 'Progressing'

    const handleOnCardClick = () => {
        if (!cardLoading && !scanDetailsError && !showScanDetailsModal) {
            // hack: added timeout to prevent click outside
            setTimeout(() => setShowScanDetailsModal(true), 100)
        }
    }

    const totalCount = getTotalSeverityCount(severityCount)

    const getIcon = () => {
        if (scanDetailsError || imageScanFailed || imageScanProgressing || totalCount) {
            return <Bug className="scy-7" />
        }
        return <Secure />
    }

    const getTitle = () => {
        if (scanDetailsError) {
            return '--'
        }
        if (imageScanFailed) {
            return <div className="dc__info-title lh-20 f-failed">Scan failed</div>
        }
        if (imageScanProgressing) {
            return <div className="f-progressing dc__loading-dots">Scanning</div>
        }
        if (!totalCount) {
            return <div className="dc__info-title lh-20 ">You're secure!</div>
        }
        return (
            <div className="fs-13 fw-6 lh-20 f-waiting" data-testid="security-card-total-count">
                {totalCount} Vulnerabilities
            </div>
        )
    }

    const getSubtitle = () => {
        if (scanDetailsError) {
            return 'Failed to fetch'
        }
        if (imageScanFailed) {
            return 'Security scan failed'
        }
        if (imageScanProgressing) {
            return 'Security scan in progress'
        }
        if (!totalCount) {
            return 'No Vulnerabilities found'
        }

        const criticalities = [
            { label: 'Critical', value: severityCount.critical },
            { label: 'High', value: severityCount.high },
            { label: 'Medium', value: severityCount.medium },
            { label: 'Low', value: severityCount.low },
            { label: 'Unknown', value: severityCount.unknown },
        ]

        return criticalities
            .filter((criticality) => !!criticality.value)
            .map((criticality) => `${criticality.value} ${criticality.label}`)
            .join(', ')
    }

    const getActionButton = () => {
        if (scanDetailsError) {
            return (
                <button
                    className="app-details-info-card__bottom-container__details fs-12 fw-6 dc__unset-button-styles"
                    onClick={reloadScanDetails}
                    data-testid="security-card-handle-refetch-button"
                >
                    Refetch
                </button>
            )
        }
        return (
            <div
                className="app-details-info-card__bottom-container__details fs-12 fw-6"
                data-testid="security-card-show-details-button"
            >
                Details
            </div>
        )
    }

    if (cardLoading || scanDetailsLoading) {
        return <LoadingCard />
    }

    if (scanDetailsResponse && !scanDetailsResponse.result.scanned) {
        return null
    }

    return (
        <button type="button" className="dc__unset-button-styles" onClick={handleOnCardClick}>
            <div
                data-testid="security-vulnerability-card"
                className={`app-details-info-card flex left bcn-0 br-8 mr-12 lh-20 w-200 ${cardLoading || scanDetailsError ? '' : 'pointer'}`}
            >
                <div className="app-details-info-card__top-container flex">
                    <div className="app-details-info-card__top-container__content">
                        <div className="app-details-info-card__top-container__content__title-wrapper">
                            <div className="fs-12 fw-4 cn-7 mr-5" data-testid="security-card-title">
                                Security
                            </div>
                            <Tippy
                                className="default-tt"
                                arrow={false}
                                placement="top"
                                content="Security scan result for the currently deployed image"
                            >
                                <div className="flex" data-testid="security-card-tippy">
                                    <Question className="icon-dim-16" />
                                </div>
                            </Tippy>
                        </div>
                        <div className="flex fs-12 fw-4" data-testid="security-card-title-text">
                            {getTitle()}
                        </div>
                    </div>
                    {getIcon()}
                </div>
                <div className="app-details-info-card__bottom-container flex-justify">
                    <span
                        className="app-details-info-card__bottom-container__message mr-2 fs-12 fw-4"
                        data-testid="security-card-vulnerabilities-text"
                    >
                        {getSubtitle()}
                    </span>
                    {getActionButton()}
                </div>
            </div>
            {showScanDetailsModal && (
                <SecurityModal
                    handleModalClose={handleModalClose}
                    isExternalCI={isExternalCI}
                    Sidebar={SecurityModalSidebar}
                    isSecurityScanV2Enabled={isSecurityScanV2Enabled}
                    isHelmApp={!!installedAppId}
                    isLoading={scanDetailsLoading}
                    error={scanDetailsError}
                    responseData={scanDetailsResponse?.result}
                    hidePolicy
                />
            )}
        </button>
    )
}

export default React.memo(SecurityVulnerabilityCard)
