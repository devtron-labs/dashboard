import React, { useEffect, useState } from 'react'
import Tippy from '@tippyjs/react'
import { ReactComponent as Question } from '../../../../assets/icons/ic-help-outline.svg'
import { ReactComponent as Bug } from '../../../../assets/icons/ic-nav-bug.svg'
import { ReactComponent as Secure } from '../../../../assets/icons/ic-secure.svg'
import { SecurityVulnerabilityCardType } from './appDetails.type'
import LoadingCard from './LoadingCard'
import { ScanDetailsModal, importComponentFromFELibrary } from '../../../common'
import { getLastExecutionMinByAppAndEnv } from '../../../../services/service'

const getSecurityScan = importComponentFromFELibrary('getSecurityScan', null, 'function')
const getSecurityScanSeveritiesCount = importComponentFromFELibrary('getSecurityScanSeveritiesCount', null, 'function')

const SecurityModal = importComponentFromFELibrary('SecurityModal')

export const SecurityVulnerabilityCard = ({
    cardLoading,
    appId,
    envId,
    installedAppId,
}: SecurityVulnerabilityCardType) => {
    const [showScanDetailsModal, setShowScanDetailsModal] = useState<boolean>(false)
    const [apiLoader, setAPILoader] = useState<boolean>(false)
    const [lastExecutionDetail, setLastExecutionDetail] = useState({
        imageScanDeployInfoId: 0,
        severityCount: { critical: 0, high: 0, moderate: 0, low: 0 },
        isError: false,
        isScanned: false,
        isScanFailed: false,
        isScanInProgress: false,
    })
    const { critical = 0, high = 0, moderate = 0, low = 0 } = lastExecutionDetail.severityCount
    const totalCount = critical + high + moderate + low || 0

    const handleModalClose = () => setShowScanDetailsModal(false)

    const handleOnCardClick = () => {
        if (!cardLoading && !lastExecutionDetail.isError) {
            setShowScanDetailsModal(true)
        }
    }

    async function getScanData() {
        if ((!appId || !envId) && !installedAppId) {
            return
        }
        setAPILoader(true)
        const isSecurityScanV2Enabled = window._env_.ENABLE_RESOURCE_SCAN_V2

        try {
            const { result } = await (isSecurityScanV2Enabled
                ? getSecurityScan({appId, envId, installedAppId})
                : getLastExecutionMinByAppAndEnv(appId, envId))
            let isScanFailed = false,
                isScanInProgress = false
            if (isSecurityScanV2Enabled) {
                isScanFailed = result.codeScan?.status === 'Failed' || false
                isScanInProgress = result.codeScan?.status === 'Progressing' || false
                if (!isScanFailed && result.imageScan?.vulnerability?.list?.length) {
                    for (const element of result.imageScan.vulnerability.list) {
                        if (element.status === 'Failed') {
                            isScanFailed = true
                            break
                        } else if (element.status === 'Progressing') {
                            isScanInProgress = true
                        }
                    }
                }
            }
            setLastExecutionDetail({
                imageScanDeployInfoId: result.imageScanDeployInfoId,
                severityCount: isSecurityScanV2Enabled ? getSecurityScanSeveritiesCount(result) : result.severityCount,
                isError: false,
                isScanned: isSecurityScanV2Enabled ? result.scanned : true,
                isScanFailed,
                isScanInProgress,
            })
        } catch (error) {
            setLastExecutionDetail({
                imageScanDeployInfoId: 0,
                severityCount: { critical: 0, high: 0, moderate: 0, low: 0 },
                isError: true,
                isScanned: true,
                isScanFailed: false,
                isScanInProgress: false,
            })
        } finally {
            setAPILoader(false)
        }
    }
    useEffect(() => {
        getScanData()
    }, [])

    const getIcon = () => {
        if (
            lastExecutionDetail.isError ||
            lastExecutionDetail.isScanFailed ||
            lastExecutionDetail.isScanInProgress ||
            totalCount
        ) {
            return <Bug className="scy-7" />
        }
        return <Secure />
    }

    const getTitle = () => {
        if (lastExecutionDetail.isError) {
            return '--'
        } else if (lastExecutionDetail.isScanFailed) {
            return <div className="dc__info-title lh-20 f-failed">Scan failed</div>
        } else if (lastExecutionDetail.isScanInProgress) {
            return <div className="f-progressing dc__loading-dots">Scanning</div>
        } else if (!totalCount) {
            return <div className="dc__info-title lh-20 ">You're secure!</div>
        }
        return (
            <div className="fs-13 fw-6 lh-20 f-waiting" data-testid="security-card-total-count">
                {totalCount} Vulnerabilities
            </div>
        )
    }

    const getSubtitle = () => {
        const criticalities = [
            { label: 'Critical', value: critical, },
            { label: 'High', value: high, },
            { label: 'Moderate', value: moderate, },
            { label: 'Low', value: low, },
        ]

        if (lastExecutionDetail.isError) {
            return 'Failed to fetch'
        } else if (lastExecutionDetail.isScanFailed) {
            return 'Security scan failed'
        } else if (lastExecutionDetail.isScanInProgress) {
            return 'Security scan in progress'
        } else if (!totalCount) {
            return 'No Vulnerabilities found'
        }

        return (
            criticalities
                .filter((criticality) => !!criticality.value)
                .map((criticality) => `${criticality.value} ${criticality.label}`)
                .join(', ')
        )
    }

    const handleRefetch = (e) => {
        e.stopPropagation()
        getScanData()
    }

    const getActionButton = () => {
        if (lastExecutionDetail.isError) {
            return (
                <div
                    className="app-details-info-card__bottom-container__details fs-12 fw-6"
                    onClick={handleRefetch}
                    data-testid="security-card-handle-refetch-button"
                >
                    Refetch
                </div>
            )
        }
        return (
            <div
                className="app-details-info-card__bottom-container__details fs-12 fw-6"
                data-testid="security-card-show-details-button"
            >
                Details
            </div>
        )
    }

    if (cardLoading || apiLoader) {
        return <LoadingCard />
    }

    if (!lastExecutionDetail.isScanned) {
        return null
    }

    return (
        <button type="button" className="dc__unset-button-styles" onClick={handleOnCardClick}>
            <div
                data-testid="security-vulnerability-card"
                className={`app-details-info-card flex left bcn-0 br-8 mr-12 lh-20 w-200 ${cardLoading || lastExecutionDetail.isError ? '' : 'pointer'}`}
            >
                <div className="app-details-info-card__top-container flex">
                    <div className="app-details-info-card__top-container__content">
                        <div className="app-details-info-card__top-container__content__title-wrapper">
                            <div className="fs-12 fw-4 cn-7 mr-5" data-testid="security-card-title">
                                Security
                            </div>
                            <Tippy
                                className="default-tt"
                                arrow={false}
                                placement="top"
                                content="Security scan result for the currently deployed image"
                            >
                                <div className="flex" data-testid="security-card-tippy">
                                    <Question className="icon-dim-16 mt-2" />
                                </div>
                            </Tippy>
                        </div>
                        <div className="flex fs-12 fw-4" data-testid="security-card-title-text">
                            {getTitle()}
                        </div>
                    </div>
                    {getIcon()}
                </div>
                <div className="app-details-info-card__bottom-container flex-justify">
                    <span
                        className="app-details-info-card__bottom-container__message mr-2 fs-12 fw-4"
                        data-testid="security-card-vulnerabilities-text"
                    >
                        {getSubtitle()}
                    </span>
                    {getActionButton()}
                </div>
            </div>
            {showScanDetailsModal &&
                (window._env_.ENABLE_RESOURCE_SCAN_V2 ? (
                    SecurityModal && (
                        <SecurityModal
                            appDetailsPayload={{
                                appId,
                                envId,
                                installedAppId,
                            }}
                            handleModalClose={handleModalClose}
                        />
                    )
                ) : (
                    <ScanDetailsModal
                        showAppInfo={false}
                        uniqueId={{
                            imageScanDeployInfoId: lastExecutionDetail.imageScanDeployInfoId,
                            appId: appId,
                            envId: envId,
                        }}
                        close={handleModalClose}
                    />
                ))}
        </button>
    )
}

export default React.memo(SecurityVulnerabilityCard)
