/*
 * Copyright (c) 2024. Devtron Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useMemo, useState } from 'react'
import {
    Progressing,
    SearchBar,
    FilterSelectPicker,
    useAsync,
    useUrlFilters,
    SelectPickerOptionType,
    ErrorScreenManager,
    FilterChips,
    FeatureTitleWithInfo,
    getCVEUrlFromCVEName,
    Button,
    ComponentSizeType,
    ButtonComponentType,
} from '@devtron-labs/devtron-fe-common-lib'
import { getCVEControlList, getVulnerabilityFilterData } from '../security.service'
import {
    CVEControlListPayload,
    ExposureListContainerProps,
    VulnerabilityExposureFilterKeys,
    VulnerabilityExposureUrlFiltersType,
} from '../security.types'
import { parseVulnerabilityExposureSearchParams } from '../security.util'
import ExposureList from './ExposureList'

const ExposureListContainer = ({ urlFilters }: ExposureListContainerProps) => {
    const [filtersLoading, filtersResponse, filtersError, reloadFilters] = useAsync(getVulnerabilityFilterData)

    const {
        offset,
        pageSize,
        searchKey: appName,
        handleSearch,
        changePage,
        changePageSize,
        updateSearchParams,
        cluster,
        environment,
        cveName,
    } = urlFilters

    const payload: CVEControlListPayload = useMemo(
        () => ({
            offset,
            size: pageSize,
            cveName: cveName.toUpperCase(),
            appName,
            clusterIds: cluster.map((clusterId) => +clusterId),
            envIds: environment.map((clusterId) => +clusterId),
        }),
        [offset, pageSize, appName, JSON.stringify(cluster), JSON.stringify(environment), cveName],
    )

    const [appListLoading, appListResponse, appListError, reloadAppList] = useAsync(
        () => getCVEControlList(payload),
        [JSON.stringify(payload)],
        !!cveName,
    )

    if (appListLoading) {
        return (
            <div style={{ height: 'calc(100vh - 280px)' }}>
                <Progressing pageLoader />
            </div>
        )
    }

    if (appListError) {
        return (
            <div style={{ height: 'calc(100vh - 280px)' }}>
                <ErrorScreenManager code={appListError.code} reload={reloadAppList} />
            </div>
        )
    }

    const clusterListOptions: SelectPickerOptionType[] = filtersResponse?.filters.clusters || []
    const environmentListOptions: SelectPickerOptionType[] = filtersResponse?.filters.environments || []

    const getFilterLabelFromValue = (filterKey: string, filterValue: string) => {
        if (filterKey === VulnerabilityExposureFilterKeys.cluster) {
            return (
                filtersResponse?.filters.clusters.find((clusterOption) => clusterOption.value === filterValue)?.label ??
                filterValue
            )
        }
        return (
            filtersResponse?.filters.environments.find((envOption) => envOption.value === filterValue)?.label ??
            filterValue
        )
    }

    const selectedClusters: SelectPickerOptionType[] = cluster.map((clusterId) => ({
        label: getFilterLabelFromValue(VulnerabilityExposureFilterKeys.cluster, clusterId),
        value: clusterId,
    }))

    const selectedEnvironments: SelectPickerOptionType[] = environment.map((envId) => ({
        label: getFilterLabelFromValue(VulnerabilityExposureFilterKeys.cluster, envId),
        value: envId,
    }))

    const handleUpdateClusterFilter = (filterValue: SelectPickerOptionType[]) => {
        updateSearchParams({ cluster: filterValue.map((clusterOption) => String(clusterOption.value)) })
    }

    const handleUpdateEnvironmentFilter = (filterValue: SelectPickerOptionType[]) => {
        updateSearchParams({ environment: filterValue.map((env) => String(env.value)) })
    }

    const clearExposureListFilters = () => {
        updateSearchParams({ cluster: [], environment: [] })
        handleSearch('')
    }

    const renderFilters = () => (
        <div className="security-scan__filters px-20 py-12">
            <SearchBar
                initialSearchText={appName}
                containerClassName="w-250"
                handleEnter={handleSearch}
                inputProps={{
                    placeholder: 'Search applications',
                    autoFocus: false,
                }}
                dataTestId="security-vulnerability-search-application"
            />
            <div className="flexbox dc__gap-8">
                <FilterSelectPicker
                    inputId="vulnerability-exposure-cluster-filter"
                    placeholder="Clusters"
                    options={clusterListOptions}
                    appliedFilterOptions={selectedClusters}
                    isDisabled={filtersLoading}
                    isLoading={filtersLoading}
                    optionListError={filtersError}
                    reloadOptionList={reloadFilters}
                    handleApplyFilter={handleUpdateClusterFilter}
                />
                <FilterSelectPicker
                    inputId="vulnerability-exposure-environment-filter"
                    placeholder="Environments"
                    options={environmentListOptions}
                    appliedFilterOptions={selectedEnvironments}
                    isDisabled={filtersLoading}
                    isLoading={filtersLoading}
                    optionListError={filtersError}
                    reloadOptionList={reloadFilters}
                    handleApplyFilter={handleUpdateEnvironmentFilter}
                    shouldMenuAlignRight
                />
            </div>
        </div>
    )

    const renderAppliedFilters = () => (
        <FilterChips<Omit<VulnerabilityExposureUrlFiltersType, 'cveName'>>
            filterConfig={{
                environment,
                cluster,
            }}
            className="px-20"
            clearFilters={clearExposureListFilters}
            onRemoveFilter={updateSearchParams}
            getFormattedValue={getFilterLabelFromValue}
        />
    )

    const appListLength: number = appListResponse.result.totalCount
    const areFiltersApplied: boolean = !!appName || !!cluster.length || !!environment.length

    return (
        <>
            {!!appListLength && renderFilters()}
            {!!appListLength && renderAppliedFilters()}
            <ExposureList
                appListResponse={appListResponse}
                areFiltersApplied={areFiltersApplied}
                clearExposureListFilters={clearExposureListFilters}
                offset={offset}
                pageSize={pageSize}
                changePage={changePage}
                changePageSize={changePageSize}
            />
        </>
    )
}

const VulnerabilityExposure = () => {
    const urlFilters = useUrlFilters<never, VulnerabilityExposureUrlFiltersType>({
        parseSearchParams: parseVulnerabilityExposureSearchParams,
    })

    const { updateSearchParams, cveName } = urlFilters

    const [cveNameSearchKey, setCveNameSearchKey] = useState(cveName)

    const handleSearchCVE = (cveNameSearchString: string) => {
        if (cveNameSearchString) {
            updateSearchParams({ cveName: cveNameSearchString })
            return
        }
        updateSearchParams({ cluster: [], environment: [], cveName: cveNameSearchString })
    }

    const handleSearchCVEButtonClick = () => {
        updateSearchParams({ cveName: cveNameSearchKey })
    }

    return (
        <div className="vulnerability-exp">
            <div className="px-20 pt-16">
                <FeatureTitleWithInfo
                    title="CVE Policy"
                    renderDescriptionContent={() =>
                        'Check the exposure of your system for a CVE-ID for future deployments.'
                    }
                    showInfoIconTippy
                    dataTestId="cve-exposure-heading"
                />
            </div>
            <div className="px-20 py-16 flexbox-col dc__gap-16">
                <div className="flexbox dc__gap-8">
                    <SearchBar
                        initialSearchText={cveName}
                        containerClassName="w-250 br-4"
                        handleSearchChange={setCveNameSearchKey}
                        handleEnter={handleSearchCVE}
                        inputProps={{
                            placeholder: 'Enter CVE ID',
                            autoFocus: true,
                        }}
                        dataTestId="security-vulnerability-cve-list"
                    />
                    <Button
                        dataTestId="search-vulnerability-button"
                        text="Search"
                        size={ComponentSizeType.medium}
                        onClick={handleSearchCVEButtonClick}
                        component={ButtonComponentType.button}
                    />
                </div>
                {!!cveName && (
                    <span className="fs-13">
                        Showing results for&nbsp;
                        <a href={getCVEUrlFromCVEName(cveName)} rel="noopener noreferrer" target="_blank">
                            {cveName}
                        </a>
                    </span>
                )}
            </div>
            <div className="dc__border-bottom-n1" />
            {!!cveName && <ExposureListContainer urlFilters={urlFilters} />}
        </div>
    )
}

export default VulnerabilityExposure
