/*
 * Copyright (c) 2024. Devtron Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { useEffect, useMemo, useRef, useState } from 'react'
import YAML from 'yaml'
import {
    InfoColourBar,
    RJSFForm,
    FormProps,
    GenericEmptyState,
    joinObjects,
    flatMapOfJSONPaths,
    HIDE_SUBMIT_BUTTON_UI_SCHEMA,
    Checkbox,
    CHECKBOX_VALUE,
    convertJSONPointerToJSONPath,
} from '@devtron-labs/devtron-fe-common-lib'
import ReactGA from 'react-ga4'
import { JSONPath } from 'jsonpath-plus'
import EmptyFolderImage from '@Images/Empty-folder.png'
import { ReactComponent as Help } from '@Icons/ic-help.svg'
import { ReactComponent as WarningIcon } from '@Icons/ic-warning.svg'
import { ReactComponent as ICArrow } from '@Icons/ic-arrow-forward.svg'
import {
    DeploymentTemplateGUICheckboxEditorProps,
    DeploymentTemplateGUIViewProps,
    GUIViewModelType,
    ViewErrorType,
} from './types'
import { GUI_VIEW_TEXTS, DEPLOYMENT_TEMPLATE_LABELS_KEYS } from './constants'
import { makeObjectFromJsonPathArray } from './utils'
import { GUIViewModel, ViewError } from './GUIViewModel'

export const getRenderActionButton =
    ({ handleChangeToYAMLMode }: Pick<DeploymentTemplateGUIViewProps, 'handleChangeToYAMLMode'>) =>
    () => (
        <button
            type="button"
            className="dc__unset-button-styles"
            onClick={handleChangeToYAMLMode}
            data-testid="base-deployment-template-switchtoadvanced-button"
        >
            <span className="cb-5 cursor fw-6">Switch to Advanced</span>
        </button>
    )

const DeploymentTemplateGUICheckbox = ({ node, updateNodeForPath }: DeploymentTemplateGUICheckboxEditorProps) => {
    const getCheckboxClickHandler = () => {
        ReactGA.event({
            category: 'Deployment Template',
            action: 'GUI Checkbox clicked',
        })
        updateNodeForPath(node.path)
    }

    const hasChildren = !!node.children && !!node.children.length

    return (
        <div className="flexbox-col dc__gap-4">
            <div className="flexbox dc__gap-8 lh-20 fs-13 dc__align-items-center">
                {!hasChildren && (
                    <Checkbox
                        value={CHECKBOX_VALUE.CHECKED}
                        isChecked={node.isChecked}
                        onChange={getCheckboxClickHandler}
                        rootClassName="mb-0"
                    />
                )}
                <span className={`fs-13 lh-20 ${hasChildren ? 'fw-6 cn-9' : 'fw-4 cn-7'}`}>
                    {node.title ?? node.key}
                </span>
            </div>
            {hasChildren && (
                <div className="flexbox-col pl-12 mt-8 mb-8 dc__border-left-n1 dc__gap-8">
                    {node.children.map((child) => (
                        <DeploymentTemplateGUICheckbox
                            key={child.key}
                            node={child}
                            updateNodeForPath={updateNodeForPath}
                        />
                    ))}
                </div>
            )}
        </div>
    )
}

const DeploymentTemplateGUIView = ({
    value,
    readOnly,
    editorOnChange,
    hideLockedKeys,
    lockedConfigKeysWithLockType,
    uneditedDocument,
    editedDocument,
    isUnSet,
    handleEnableWasGuiOrHideLockedKeysEdited,
    wasGuiOrHideLockedKeysEdited,
    handleChangeToYAMLMode,
    guiSchema,
    selectedChart,
}: DeploymentTemplateGUIViewProps) => {
    const [formData, setFormData] = useState(null)
    const [uncheckedPathsList, setUncheckedPathsList] = useState([])
    const modelRef = useRef<GUIViewModelType>(null)

    useEffect(() => {
        try {
            setFormData(YAML.parse(value))
            if (!modelRef.current) {
                modelRef.current = new GUIViewModel(guiSchema, value)
                setUncheckedPathsList(modelRef.current.getUncheckedNodes())
            }
        } catch {
            handleChangeToYAMLMode()
        }
    }, [value, guiSchema])

    const state = useMemo(() => {
        try {
            const parsedGUISchema = JSON.parse(guiSchema)
            if (!Object.keys(parsedGUISchema).length) {
                throw new ViewError(
                    'GUI schema not found',
                    `The GUI view is generated by a schema. Please provide GUI schema for ${selectedChart?.name} / ${selectedChart?.version} to show the GUI view`,
                )
            }

            if (!modelRef.current?.totalCheckedCount) {
                throw new ViewError(
                    'All fields are unselected',
                    'Select fields from the side pane that you wish to be displayed here',
                )
            }

            if (!hideLockedKeys) {
                return {
                    guiSchema: parsedGUISchema,
                    uiSchema: joinObjects([
                        HIDE_SUBMIT_BUTTON_UI_SCHEMA,
                        ...uncheckedPathsList.map((path) =>
                            makeObjectFromJsonPathArray(0, JSONPath.toPathArray(convertJSONPointerToJSONPath(path))),
                        ),
                    ]),
                }
            }
            // Note: if the locked keys are not resolved from the following json(s)
            // then the logic to hide them will not work
            const parsedUneditedDocument = YAML.parse(uneditedDocument)
            const parsedEditedDocument = YAML.parse(editedDocument)
            // NOTE: suppose we lock ingress.hosts[1].host, and the locked key's path is
            // resolved from either of the above json(s) then host field from all array entries
            // will be hidden not just the host field at index 1 (limitation)
            return {
                guiSchema: parsedGUISchema,
                uiSchema: joinObjects([
                    HIDE_SUBMIT_BUTTON_UI_SCHEMA,
                    ...lockedConfigKeysWithLockType.config.flatMap((key) =>
                        // NOTE: we need to use the original document to evaluate the actual paths
                        flatMapOfJSONPaths([key], parsedUneditedDocument)
                            .concat(flatMapOfJSONPaths([key], parsedEditedDocument))
                            .map((path) => makeObjectFromJsonPathArray(0, JSONPath.toPathArray(path))),
                    ),
                    ...uncheckedPathsList.map((path) =>
                        makeObjectFromJsonPathArray(0, JSONPath.toPathArray(convertJSONPointerToJSONPath(path))),
                    ),
                ]),
            }
        } catch (err) {
            if (err instanceof ViewError) {
                return {
                    error: err as ViewErrorType,
                }
            }
            return {
                error: {
                    title: 'Something unexpected happened!',
                    subTitle: err.message ?? 'Something broke while processing the json schema',
                },
            }
        }
    }, [guiSchema, hideLockedKeys, uncheckedPathsList, modelRef.current?.totalCheckedCount])

    const handleFormChange: FormProps['onChange'] = (data) => {
        if (!wasGuiOrHideLockedKeysEdited) {
            handleEnableWasGuiOrHideLockedKeysEdited()
        }
        editorOnChange?.(YAML.stringify(data.formData))
    }

    const updateNodeForPath = (path: string) => {
        if (modelRef.current) {
            modelRef.current.updateNodeForPath(path)
            setUncheckedPathsList(modelRef.current.getUncheckedNodes())
        }
    }

    const renderContent = () => {
        if (state.error) {
            return (
                <GenericEmptyState image={EmptyFolderImage} {...state.error}>
                    <button
                        type="button"
                        className="cta cta-with-img secondary dc__gap-6"
                        onClick={handleChangeToYAMLMode}
                        aria-label={GUI_VIEW_TEXTS.SWITCH_TO_ADVANCE_BUTTON_TEXT}
                    >
                        <span>{GUI_VIEW_TEXTS.SWITCH_TO_ADVANCE_BUTTON_TEXT}</span>
                        <ICArrow className="icon-dim-16-imp dc__no-shrink" />
                    </button>
                </GenericEmptyState>
            )
        }

        return (
            <div className="dc__overflow-scroll">
                <RJSFForm
                    schema={state.guiSchema}
                    formData={formData || {}}
                    onChange={handleFormChange}
                    uiSchema={state.uiSchema}
                    disabled={readOnly}
                    experimental_defaultFormStateBehavior={{
                        emptyObjectFields: 'skipDefaults',
                    }}
                    liveValidate
                />
            </div>
        )
    }

    return (
        <>
            {isUnSet && (
                <div className="bcy-1 fs-12 fw-4 cn-9 en-2 bw-1 dc__no-left-border dc__no-right-border flexbox pt-8 pr-16 pb-8 pl-16 h-32 lh-16">
                    <WarningIcon className="warning-icon-y7 icon-dim-16 mr-8" />
                    {DEPLOYMENT_TEMPLATE_LABELS_KEYS.codeEditor.warning}
                </div>
            )}

            {/* TODO: maybe move it into the render content */}
            <div
                className="dc__grid dc__overflow-hidden flex-grow-1"
                style={{
                    gridTemplateColumns: '1fr 300px',
                }}
            >
                {renderContent()}
                {modelRef.current && (
                    <div className="dc__border-left-n1 dc__overflow-scroll p-20 flexbox-col dc__gap-12">
                        {modelRef.current.root.children.map((child) => (
                            <DeploymentTemplateGUICheckbox node={child} updateNodeForPath={updateNodeForPath} />
                        ))}
                    </div>
                )}
            </div>

            {/* In case of readOnly makes no sense */}
            {!state.error && (
                <InfoColourBar
                    message="To modify additional configurations"
                    classname="dc__content-start en-2 bw-1 dc__no-left-border dc__no-right-border bcv-1 bcv-1 w-100 switch-to-advance-info-bar"
                    Icon={Help}
                    iconClass="fcv-5 icon-dim-20"
                    renderActionButton={getRenderActionButton({ handleChangeToYAMLMode })}
                />
            )}
        </>
    )
}

export default DeploymentTemplateGUIView
